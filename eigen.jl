using Revise, ApproxOperator, LinearAlgebra, Printf, TimerOutputs, SparseArrays
ndiv=64
include("input.jl")

# elements,nodes,nodes_p = import_fem_tri3_GI1("./msh/square_"*string(ndiv)*".msh","./msh/square_"*string(ndiv)*".msh")
# elements,nodes,nodes_p = import_quad_GI1("./msh/square_quad_"*string(ndiv)*".msh","./msh/square_quad_"*string(ndiv)*".msh")
elements,nodes,nodes_p = import_quad8_GI1("./msh/square_quad8_"*string(ndiv)*".msh","./msh/square_quad8_"*string(ndiv)*".msh")

const to = TimerOutput()

n‚Çö = length(nodes)

@timeit to "shape function" begin
setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œ©·µõ"])
set‚àáùù≠!(elements["Œ©·µõ"])
setùù≠!(elements["Œì·µç"])
end
P = 1000
 EÃÑ = 3e6
ŒΩÃÑ = 0.49999
# ŒΩÃÑ = 0.3
E = EÃÑ/(1.0-ŒΩÃÑ^2)
ŒΩ = ŒΩÃÑ/(1.0-ŒΩÃÑ)
L = 12
D = 12
I = D^3/12
EI = E*I
I = D^3/12
EI = E*I

prescribe!(elements["Œì·µç"],:g‚ÇÅ=>(x,y,z)->-P*y/6/EI*((6*L-3*x)*x + (2+ŒΩ)*(y^2-D^2/4)))
prescribe!(elements["Œì·µç"],:g‚ÇÇ=>(x,y,z)->P/6/EI*(3*ŒΩ*y^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2))
prescribe!(elements["Œì·µç"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
prescribe!(elements["Œì·µç"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì·µç"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)

ops = [
       Operator{:‚à´‚à´Œµ·µ¢‚±ºœÉ·µ¢‚±ºdxdy}(:E=>E,:ŒΩ=>ŒΩ),
       Operator{:‚à´v·µ¢t·µ¢ds}(),
       Operator{:‚à´v·µ¢g·µ¢ds}(:Œ±=>1e9*E),
       Operator{:H‚Çë_PlaneStress}(:E=>E,:ŒΩ=>ŒΩ)
]
ops·µõ = [
    Operator{:‚à´‚à´Œµ·µõ·µ¢‚±ºœÉ·µõ·µ¢‚±ºdxdy}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ )
]
ops·µà = [
    Operator{:‚à´‚à´Œµ·µà·µ¢‚±ºœÉ·µà·µ¢‚±ºdxdy}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ )
]

@timeit to "assembly matrix" begin
k·µõ = zeros(2*n‚Çö,2*n‚Çö)
k·µà = zeros(2*n‚Çö,2*n‚Çö)
k·µç = zeros(2*n‚Çö,2*n‚Çö) 
f = zeros(2*n‚Çö)


ops·µõ[1](elements["Œ©·µõ"],k·µõ)
# ops·µõ[1](elements["Œ©"],k·µõ)
ops·µà[1](elements["Œ©"],k·µà)
ops[3](elements["Œì·µç"],k·µç,f)
end

@timeit to "eigen" begin
v = eigvals(k·µõ,k·µà+k·µç)
end

show(to)